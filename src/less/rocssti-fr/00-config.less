// LESS values : adaptez-les à vos designs

// la taille du texte courant
@basefont              : 16;  // si "14" alors 1em = 14px
// line-height par défaut
@l-h                   : 1.5; // equiv line-height 1.5

// fonts
@font-family           : 'Arial, sans-serif';

// couleurs projets
// @abbréviation-projet - color


// couleurs
@color-bg-body         : #fff;
@color-body            : #333;
@color-links           : #2573be;
@color-hover           : #000;
@color-hr              : #000;
@hr-height             : 1px;
@color-alert           : #bf0000;

// largeurs
@input-defaut-size     : 250px;

// RTL
@rtl_option            : false;

// hyphens
@hyphenation_default   : false;

// clear floats
@use_clearleft_right   : false;
@use_clearhidden       : false;
@use_clearfix          : false;

// rythme vertical 
// valeurs possibles : 'double_top_single_bottom',  'single_top', 'single_bottom'
@vertical-rythm        : 'single_bottom'; 

// unité pour la typo
// valeurs possibles   : 'use_em',  'use_rem', 'use_rem_with_em_fallback'
@typo-unit             : 'use_em';

// applique le 62.5% sur html et influe sur le calcul des rems
@root-equiv-10-px      : true;

// postulat de base : la typo par défaut est à 16 pixels dans le browser
// normalement, vous ne devriez JAMAIS updater cette valeur, mais… sait-on jamais…
@root-default-font-size: 16;

// autres



// LESS functions : pas touche ;)

.pxtoem (@fontsize) {font-size: (@fontsize / @basefont) + 0em;}

.pxtorem (@fontsize) {
  & when (@root-equiv-10-px) {
    font-size: (@fontsize / 10) + 0rem; 
  }
  & when (@root-equiv-10-px = false) {
    font-size: (@fontsize / @root-default-font-size) + 0rem; 
  }
}

.line (@fontsize) {line-height: @l-h *2 / (@fontsize / @basefont) + 0em}

.grid (@number) {width: (100%-(@gutter*(@number - 1))) / @number;}

/* calculées via https://rocssti.net/builder-css
 * basé sur http://soqr.fr/vertical-rhythm/ merci @goetter & @eQRoeil */


// valeur d'arrondi, pour le nombre de chiffres après la virgule => 10000 => 1.6667 ; 100000 => 1.13374
.flow_hx(@font-size, @base-font: @basefont, @base-height: @l-h, @rounding-value: 100000) when (@vertical-rythm = 'double_top_single_bottom') {

  @coef: ceil(1 / (@base-height * @base-font / @font-size));
  @other_coef: ceil(@base-height * @base-font / @font-size);
  @size: (@font-size / @base-font) + 0em;
  @height: (@base-font * @base-height / @font-size);
  @margin: (@height * @coef );

  & when not (@typo-unit = 'use_rem') { // em
    font-size: round(@size * @rounding-value) / @rounding-value;
  }
  & when not (@typo-unit = 'use_em') { // rem
    & when (@root-equiv-10-px) {
      font-size: (@font-size / 10) + 0rem;
      }
    & when not (@root-equiv-10-px) {
      font-size: (@font-size / @root-default-font-size) + 0rem;
      }
  }
line-height: round(@height * @coef * @rounding-value) / @rounding-value;
margin: ( round(@margin*@rounding-value)/@rounding-value * @other_coef + 0em) 0 (round(@margin*@rounding-value)/@rounding-value/2 * @other_coef + 0em) 0;

}
.flow_hx(@font-size, @base-font: @basefont, @base-height: @l-h, @rounding-value: 100000) when (@vertical-rythm = 'single_top') {

  @coef: ceil(1 / (@base-height * @base-font / @font-size));
  @other_coef: ceil(@base-height * @base-font / @font-size);
  @size: (@font-size / @base-font) + 0em;
  @height: (@base-font * @base-height / @font-size);
  @margin: (@height * @coef );

  & when not (@typo-unit = 'use_rem') { // em
    font-size: round(@size * @rounding-value) / @rounding-value;
  }
  & when not (@typo-unit = 'use_em') { // rem
    & when (@root-equiv-10-px) {
      font-size: (@font-size / 10) + 0rem;
      }
    & when not (@root-equiv-10-px) {
      font-size: (@font-size / @root-default-font-size) + 0rem;
      }
  }

line-height: round(@height * @coef * @rounding-value) / @rounding-value;
margin: (round(@margin*@rounding-value)/@rounding-value/2 * @other_coef + 0em) 0 0 0;

}
.flow_hx(@font-size, @base-font: @basefont, @base-height: @l-h, @rounding-value: 100000) when (@vertical-rythm = 'single_bottom') {

  @coef: ceil(1 / (@base-height * @base-font / @font-size));
  @other_coef: ceil(@base-height * @base-font / @font-size);
  @size: (@font-size / @base-font) + 0em;
  @height: (@base-font * @base-height / @font-size);
  @margin: (@height * @coef );

  & when not (@typo-unit = 'use_rem') { // em
    font-size: round(@size * @rounding-value) / @rounding-value;
  }
  & when not (@typo-unit = 'use_em') { // rem
    & when (@root-equiv-10-px) {
      font-size: (@font-size / 10) + 0rem;
      }
    & when not (@root-equiv-10-px) {
      font-size: (@font-size / @root-default-font-size) + 0rem;
      }
  }
line-height: round(@height * @coef * @rounding-value) / @rounding-value;
margin: 0 0 (round(@margin*@rounding-value)/@rounding-value/2 * @other_coef + 0em) 0;

}

// pour les classes smaller, bigger, etc.
.flow_other(@font-size, @base-font: @basefont, @base-height: @l-h, @rounding-value: 100000) {


  @coef: ceil(1 / (@base-height * @base-font / @font-size));
  @other_coef: ceil(@base-height * @base-font / @font-size);
  @size: (@font-size / @base-font) + 0em;
  @height: (@base-font * @base-height / @font-size);
  @mar-top: (@height * @coef );

  & when not (@typo-unit = 'use_rem') { // em
    font-size: round(@size * @rounding-value) / @rounding-value;
  }
  & when not (@typo-unit = 'use_em') { // rem
    & when (@root-equiv-10-px) {
      font-size: (@font-size / 10) + 0rem;
      }
    & when not (@root-equiv-10-px) {
      font-size: (@font-size / @root-default-font-size) + 0rem;
      }
  }
line-height: round(@height * @coef * @rounding-value) / @rounding-value;
margin: ( round(@mar-top*@rounding-value)/@rounding-value + 0em) 0;

}
